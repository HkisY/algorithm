package com.Hxin.leetcode.hard.day14;

import java.util.*;

/**
 * 现有一个含 n 个顶点的 双向 图，每个顶点按从 0 到 n - 1 标记。图中的边由二维整数数组 edges 表示，其中 edges{i} = {ui, vi} 表示顶点 ui
 * 和 vi 之间存在一条边。每对顶点最多通过一条边连接，并且不存在与自身相连的顶点。返回图中 最短 环的长度。如果不存在环，则返回 -1 。
 * <p>
 * 环是指以同一节点开始和结束，并且路径中的每条边仅使用一次。
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 7, edges = {{0,1},{1,2},{2,0},{3,4},{4,5},{5,6},{6,3}}
 * <p>
 * 输出：3
 * <p>
 * 解释：长度最小的循环是：0 -> 1 -> 2 -> 0
 * <p>
 * 示例 2：
 * <p>
 * <p>
 * 输入：n = 4, edges = {{0,1},{0,2}}
 * <p>
 * 输出：-1
 * <p>
 * 解释：图中不存在循环
 *
 * @author Hxin
 * @version 1.0
 * @since 2023/8/16 18:24
 */
public class FindShortestCycle {
    private static List<Integer> ansList = new ArrayList<>();

    public static void main(String[] args) {
//        int[][] edges = {
//                {0,1},{1,2},{2,0},{0,3},{3,4},{4,5},{6,7},{7,8},{8,9},{9,10},
//                {10,11},{11,12},{12,0},{2,7},{2,4},{1,8},{1,11}
//        };
//        int n = 13;//3
//        int[][] edges = {{4, 1}, {5, 1}, {3, 2}, {5, 0}, {4, 0}, {3, 0}, {2, 1}};
//        int n = 6;//4
//        int[][] edges = {
//                {0, 1}, {0,2}
//        };
//        int n = 4;//-1
//        int[][] edges = {
//                {0, 2}, {2, 4}, {4, 0}
//        };
//        int n = 5;//3
//        int n = 7;
//        int[][] edges = {{0, 1}, {1, 2}, {2, 0}, {3, 4}, {4, 5}, {5, 6}, {6, 3}};

//        int[][] edges =
//                {{256, 227}, {165, 227}, {313, 165}, {53, 256}, {83, 256}, {395, 313}, {387, 53}, {130, 395}, {37, 83}, {299, 313}, {302, 165}, {6, 299}, {290, 313},
//                        {110, 130}, {271, 313}, {60, 302}, {228, 130}, {26, 387}, {336, 60}, {67, 313}, {84, 302}, {153, 256}, {36, 313}, {234, 165}, {288, 256},
//                        {264, 256}, {188, 130}, {319, 387}, {346, 288}, {308, 6}, {361, 110}, {9, 264}, {106, 83}, {87, 37}, {370, 84}, {90, 106}, {259, 308},
//                        {210, 302}, {117, 53}, {208, 290}, {397, 228}, {200, 117}, {333, 395}, {253, 271}, {182, 26}, {347, 333}, {366, 106}, {154, 395},
//                        {56, 259}, {5, 153}, {229, 208}, {57, 347}, {73, 110}, {363, 37}, {285, 37}, {250, 5}, {12, 370}, {379, 117}, {180, 250}, {125, 36},
//                        {43, 165}, {287, 73}, {384, 125}, {150, 285}, {345, 87}, {349, 347}, {327, 90}, {294, 264}, {281, 345}, {339, 327}, {252, 43}, {328, 84},
//                        {131, 336}, {177, 256}, {277, 57}, {239, 328}, {151, 363}, {284, 165}, {48, 117}, {167, 180}, {0, 84}, {231, 165}, {99, 208}, {312, 106},
//                        {220, 182}, {170, 284}, {286, 227}, {129, 6}, {268, 150}, {179, 333}, {51, 210}, {111, 395}, {30, 182}, {29, 131}, {102, 48}, {300, 346},
//                        {257, 384}, {204, 370}, {381, 234}, {389, 327}, {1, 60}, {376, 29}, {24, 313}, {357, 24}, {39, 151}, {221, 319}, {335, 312}, {243, 117},
//                        {304, 9}, {70, 281}, {266, 188}, {205, 48}, {307, 6}, {216, 110}, {96, 384}, {123, 366}, {396, 349}, {183, 284}, {293, 381}, {233, 208},
//                        {360, 204}, {260, 233}, {178, 231}, {289, 39}, {143, 130}, {76, 43}, {166, 361}, {295, 346}, {279, 180}, {176, 129}, {350, 210}, {197, 167},
//                        {241, 281}, {149, 381}, {212, 110}, {124, 228}, {368, 73}, {273, 143}, {4, 166}, {383, 287}, {314, 39}, {7, 389}, {309, 123}, {162, 30},
//                        {195, 257}, {157, 293}, {44, 279}, {348, 90}, {158, 294}, {191, 48}, {258, 182}, {315, 6}, {91, 99}, {77, 277}, {356, 48}, {103, 24}, {374, 43},
//                        {364, 228}, {192, 83}, {64, 205}, {398, 9}, {141, 24}, {211, 315}, {25, 1}, {120, 200}, {121, 313}, {242, 87}, {79, 91}, {146, 30}, {33, 383},
//                        {59, 195}, {159, 333}, {225, 120}, {189, 319}, {122, 308}, {218, 141}, {244, 314}, {104, 1}, {186, 33}, {316, 287}, {50, 389}, {61, 374},
//                        {318, 176}, {352, 96}, {263, 349}, {136, 200}, {267, 186}, {187, 345}, {88, 397}, {262, 279}, {305, 146}, {41, 241}, {371, 273}, {378, 43},
//                        {214, 396}, {343, 48}, {202, 151}, {34, 347}, {15, 300}, {394, 67}, {69, 295}, {3, 70}, {2, 154}, {94, 364}, {393, 281}, {113, 159}, {276, 302},
//                        {224, 167}, {340, 91}, {97, 348}, {362, 33}, {222, 183}, {23, 276}, {353, 110}, {14, 151}, {119, 110}, {109, 202}, {223, 396}, {298, 335},
//                        {291, 188}, {105, 177}, {35, 77}, {133, 200}, {93, 23}, {323, 12}, {8, 312}, {206, 398}, {28, 3}, {355, 143}, {128, 166}, {148, 165}, {13, 229},
//                        {174, 383}, {66, 197}, {78, 136}, {58, 167}, {354, 180}, {274, 182}, {375, 205}, {142, 151}, {386, 90}, {108, 293}, {169, 361}, {240, 363},
//                        {164, 88}, {161, 76}, {175, 150}, {140, 53}, {85, 234}, {190, 117}, {391, 133}, {385, 298}, {137, 104}, {47, 5}, {81, 287}, {292, 97}, {42, 357},
//                        {358, 57}, {207, 313}, {198, 191}, {203, 218}, {282, 110}, {163, 133}, {254, 214}, {209, 378}, {144, 4}, {270, 1}, {278, 195}, {230, 1}, {21, 13},
//                        {171, 363}, {11, 43}, {303, 290}, {246, 29}, {18, 192}, {236, 64}, {377, 389}, {49, 205}, {160, 264}, {40, 109}, {52, 97}, {338, 223}, {199, 361},
//                        {367, 121}, {172, 48}, {217, 289}, {332, 30}, {173, 253}, {82, 253}, {399, 4}, {138, 209}, {322, 177}, {62, 276}, {373, 187}, {301, 242}, {388, 368},
//                        {321, 259}, {344, 396}, {311, 113}, {337, 163}, {359, 295}, {247, 186}, {296, 59}, {372, 111}, {334, 296}, {272, 64}, {331, 157}, {380, 154},
//                        {248, 82}, {20, 208}, {201, 313}, {342, 66}, {249, 202}, {185, 1}, {238, 140}, {89, 78}, {27, 7}, {325, 396}, {135, 373}, {255, 318}, {72, 362},
//                        {147, 295}, {127, 206}, {237, 3}, {38, 121}, {63, 316}, {155, 218}, {382, 272}, {19, 331}, {86, 175}, {351, 282}, {31, 212}, {193, 178},
//                        {194, 185}, {213, 246}, {392, 339}, {251, 103}, {330, 72}, {275, 48}, {101, 357}, {132, 53}, {219, 259}, {55, 88}, {32, 389}, {184, 120},
//                        {369, 147}, {320, 221}, {283, 284}, {317, 73}, {114, 172}, {235, 154}, {245, 224}, {390, 353}, {95, 327}, {65, 247}, {306, 289}, {215, 60},
//                        {265, 336}, {310, 340}, {152, 21}, {261, 217}, {232, 241}, {341, 213}, {280, 289}, {68, 361}, {329, 286}, {324, 104}, {297, 111}, {16, 199},
//                        {168, 203}, {365, 354}, {326, 271}, {71, 158}, {22, 224}, {75, 4}, {112, 326}, {74, 123}, {145, 273}, {181, 148}, {45, 95}, {17, 27}, {269, 55},
//                        {54, 168}, {226, 314}, {196, 9}, {80, 138}, {126, 281}, {139, 274}, {10, 353}, {118, 67}, {46, 243}, {100, 383}, {98, 75}, {116, 377}, {134, 185},
//                        {156, 290}, {92, 296}, {115, 170}, {107, 130}, {399, 378}};
//        int n = 400;

        int[][] edges =
                {{314, 392}, {938, 528}, {373, 747}, {69, 417}, {165, 66}, {789, 366}, {387, 534}, {926, 364}, {731, 754}, {719, 150}, {500, 459}, {146, 185}, {523, 740}, {905, 835}, {799, 836}, {431, 894}, {334, 574}, {567, 241}, {894, 530}, {700, 243}, {951, 255}, {953, 269}, {391, 408}, {524, 625}, {674, 486}, {407, 786}, {460, 482}, {616, 904}, {494, 448}, {872, 195}, {803, 464}, {806, 461}, {801, 918}, {63, 264}, {786, 932}, {611, 145}, {475, 547}, {271, 194}, {439, 736}, {161, 879}, {346, 279}, {498, 514}, {26, 27}, {142, 683}, {741, 287}, {939, 586}, {923, 227}, {911, 579}, {606, 202}, {595, 61}, {607, 275}, {688, 374}, {321, 123}, {376, 657}, {541, 469}, {183, 791}, {637, 20}, {503, 267}, {252, 90}, {813, 352}, {251, 734}, {846, 858}, {653, 22}, {592, 196}, {348, 612}, {559, 107}, {194, 405}, {489, 704}, {398, 403}, {481, 95}, {81, 283}, {859, 98}, {53, 527}, {341, 335}, {625, 789}, {543, 381}, {795, 589}, {654, 341}, {532, 841}, {515, 362}, {127, 327}, {65, 779}, {273, 186}, {775, 559}, {164, 29}, {351, 156}, {111, 767}, {78, 624}, {181, 702}, {480, 556}, {892, 628}, {916, 109}, {603, 816}, {12, 923}, {886, 342}, {824, 684}, {44, 430}, {655, 154}, {782, 100}, {472, 670}, {149, 927}, {484, 291}, {933, 353}, {550, 730}, {720, 406}, {259, 349}, {435, 32}, {525, 580}, {350, 795}, {47, 497}, {139, 117}, {619, 790}, {545, 53}, {268, 873}, {867, 604}, {557, 716}, {562, 280}, {133, 192}, {446, 823}, {70, 460}, {513, 214}, {621, 73}, {843, 54}, {851, 301}, {752, 781}, {652, 855}, {157, 937}, {756, 76}, {11, 184}, {755, 890}, {605, 299}, {137, 57}, {392, 672}, {932, 929}, {151, 843}, {733, 623}, {458, 665}, {857, 865}, {464, 360}, {477, 947}, {635, 136}, {573, 745}, {148, 709}, {504, 11}, {220, 722}, {701, 10}, {584, 830}, {49, 131}, {281, 246}, {193, 512}, {521, 315}, {56, 439}, {702, 351}, {593, 875}, {399, 451}, {697, 316}, {97, 358}, {651, 693}, {675, 45}, {306, 116}, {571, 479}, {693, 897}, {643, 78}, {444, 141}, {691, 533}, {345, 21}, {182, 550}, {394, 956}, {930, 435}, {906, 594}, {243, 893}, {88, 24}, {580, 337}, {406, 276}, {0, 536}, {31, 606}, {891, 783}, {753, 170}, {715, 935}, {871, 681}, {663, 892}, {955, 564}, {749, 258}, {947, 326}, {596, 763}, {471, 245}, {411, 655}, {750, 465}, {842, 780}, {482, 235}, {673, 682}, {716, 137}, {54, 820}, {634, 394}, {692, 204}, {479, 97}, {676, 69}, {860, 930}, {216, 572}, {645, 232}, {561, 600}, {68, 741}, {784, 176}, {171, 666}, {36, 425}, {819, 812}, {109, 660}, {89, 632}, {288, 735}, {910, 310}, {724, 513}, {919, 37}, {1, 609}, {797, 739}, {90, 924}, {416, 555}, {831, 490}, {864, 463}, {858, 583}, {302, 30}, {742, 950}, {101, 787}, {862, 933}, {320, 668}, {134, 601}, {588, 205}, {600, 715}, {140, 794}, {601, 251}, {924, 633}, {639, 203}, {19, 662}, {883, 365}, {493, 317}, {414, 308}, {358, 541}, {16, 712}, {67, 503}, {461, 373}, {827, 821}, {242, 59}, {586, 271}, {686, 561}, {811, 911}, {875, 473}, {17, 525}, {730, 686}, {591, 658}, {828, 507}, {378, 566}, {308, 648}, {433, 576}, {794, 611}, {704, 535}, {581, 188}, {340, 608}, {564, 375}, {434, 539}, {332, 64}, {579, 376}, {363, 903}, {178, 199}, {783, 705}, {468, 667}, {156, 79}, {918, 103}, {463, 544}, {530, 898}, {548, 703}, {743, 49}, {124, 510}, {641, 92}, {440, 132}, {884, 769}, {86, 582}, {956, 307}, {487, 885}, {262, 542}, {729, 437}, {118, 886}, {802, 945}, {622, 114}, {6, 622}, {907, 94}, {920, 749}, {483, 833}, {442, 661}, {221, 378}, {890, 121}, {397, 99}, {202, 842}, {727, 371}, {711, 901}, {761, 516}, {821, 312}, {810, 220}, {428, 630}, {282, 817}, {902, 799}, {385, 329}, {748, 155}, {102, 240}, {129, 382}, {833, 40}, {413, 521}, {449, 239}, {474, 748}, {295, 485}, {694, 862}, {330, 492}, {664, 39}, {837, 211}, {91, 369}, {290, 440}, {707, 31}, {899, 756}, {612, 551}, {292, 499}, {879, 860}, {225, 920}, {186, 72}, {372, 726}, {326, 766}, {204, 368}, {367, 407}, {381, 161}, {305, 207}, {885, 262}, {143, 653}, {408, 345}, {519, 318}, {656, 595}, {751, 526}, {121, 393}, {574, 877}, {840, 827}, {217, 171}, {310, 2}, {215, 805}, {107, 755}, {58, 811}, {20, 731}, {155, 285}, {841, 338}, {303, 414}, {253, 293}, {265, 695}, {324, 457}, {681, 328}, {589, 699}, {201, 436}, {812, 491}, {754, 671}, {832, 742}, {893, 108}, {836, 330}, {257, 383}, {2, 391}, {213, 449}, {582, 642}, {85, 333}, {388, 455}, {120, 813}, {936, 67}, {713, 899}, {578, 322}, {74, 752}, {258, 711}, {451, 801}, {888, 87}, {777, 172}, {934, 124}, {189, 102}, {780, 226}, {690, 470}, {903, 944}, {76, 182}, {791, 859}, {180, 884}, {609, 206}, {657, 680}, {793, 115}, {239, 427}, {432, 953}, {291, 677}, {531, 15}, {898, 290}, {64, 80}, {343, 23}, {412, 346}, {283, 6}, {766, 278}, {948, 159}, {154, 249}, {569, 788}, {409, 166}, {420, 509}, {922, 515}, {774, 273}, {687, 714}, {73, 261}, {37, 398}, {18, 221}, {671, 248}, {549, 158}, {218, 562}, {331, 815}, {492, 331}, {15, 864}, {897, 424}, {441, 263}, {510, 569}, {32, 152}, {706, 110}, {316, 732}, {247, 641}, {286, 621}, {27, 847}, {75, 126}, {722, 413}, {556, 617}, {405, 946}, {52, 828}, {677, 411}, {660, 762}, {14, 168}, {315, 771}, {59, 148}, {636, 848}, {29, 361}, {150, 135}, {772, 62}, {138, 3}, {104, 458}, {79, 519}, {304, 423}, {760, 697}, {866, 876}, {870, 567}, {307, 384}, {176, 664}, {915, 400}, {116, 724}, {659, 523}, {495, 744}, {61, 629}, {502, 390}, {666, 259}, {419, 428}, {453, 607}, {661, 34}, {293, 8}, {274, 198}, {60, 209}, {478, 367}, {219, 501}, {944, 850}, {620, 949}, {335, 334}, {135, 746}, {747, 723}, {71, 178}, {166, 887}, {466, 650}, {599, 218}, {379, 596}, {874, 266}, {393, 197}, {230, 447}, {84, 344}, {455, 112}, {469, 753}, {83, 720}, {365, 540}, {214, 313}, {240, 631}, {424, 914}, {935, 230}, {82, 793}, {678, 215}, {728, 943}, {98, 690}, {563, 456}, {456, 418}, {3, 922}, {945, 140}, {370, 25}, {630, 619}, {196, 558}, {662, 907}, {163, 710}, {174, 577}, {516, 129}, {649, 380}, {299, 675}, {576, 441}, {497, 549}, {249, 187}, {222, 309}, {546, 826}, {488, 955}, {826, 543}, {188, 663}, {726, 412}, {238, 177}, {542, 138}, {30, 645}, {267, 180}, {312, 174}, {272, 570}, {200, 483}, {914, 687}, {509, 294}, {717, 718}, {46, 822}, {325, 320}, {159, 386}, {167, 319}, {522, 560}, {767, 863}, {421, 471}, {452, 305}, {344, 851}, {170, 111}, {507, 468}, {110, 620}, {644, 354}, {429, 797}, {454, 101}, {712, 219}, {51, 889}, {709, 573}, {839, 164}, {808, 295}, {853, 888}, {100, 402}, {255, 563}, {459, 909}, {95, 224}, {583, 426}, {366, 706}, {369, 323}, {168, 951}, {192, 896}, {93, 938}, {132, 814}, {112, 592}, {598, 647}, {264, 257}, {162, 772}, {423, 639}, {829, 38}, {173, 803}, {647, 646}, {896, 41}, {514, 401}, {126, 253}, {830, 939}, {212, 618}, {928, 84}, {438, 616}, {904, 750}, {640, 300}, {758, 26}, {427, 70}, {270, 233}, {436, 538}, {48, 82}, {45, 546}, {901, 265}, {565, 281}, {425, 866}, {462, 183}, {642, 554}, {629, 810}, {187, 478}, {209, 656}, {336, 157}, {289, 350}, {389, 81}, {443, 819}, {735, 7}, {863, 357}, {77, 764}, {278, 462}, {682, 336}, {374, 637}, {465, 143}, {228, 201}, {13, 377}, {21, 774}, {590, 925}, {233, 916}, {739, 853}, {585, 190}, {877, 304}, {361, 678}, {685, 489}, {55, 941}, {103, 272}, {123, 575}, {882, 321}, {113, 602}, {617, 532}, {764, 133}, {900, 676}, {317, 717}, {457, 395}, {670, 807}, {207, 867}, {152, 12}, {94, 654}, {236, 208}, {28, 553}, {322, 47}, {203, 452}, {917, 498}, {371, 651}, {395, 636}, {646, 339}, {762, 4}, {415, 593}, {99, 160}, {505, 252}, {618, 169}, {878, 363}, {144, 948}, {197, 591}, {136, 83}, {62, 737}, {844, 500}, {835, 250}, {518, 297}, {850, 77}, {512, 71}, {311, 926}, {5, 91}, {470, 434}, {714, 181}, {499, 96}, {39, 256}, {732, 707}, {873, 43}, {473, 784}, {587, 147}, {261, 122}, {401, 518}, {25, 494}, {814, 493}, {9, 759}, {342, 162}, {627, 940}, {169, 125}, {807, 359}, {602, 298}, {538, 388}, {490, 733}, {560, 495}, {42, 165}, {445, 19}, {198, 765}, {880, 824}, {347, 603}, {294, 725}, {768, 85}, {92, 496}, {130, 829}, {390, 444}, {665, 325}, {536, 627}, {57, 404}, {501, 931}, {338, 303}, {533, 65}, {847, 153}, {925, 869}, {323, 520}, {855, 775}, {769, 35}, {87, 770}, {496, 48}, {105, 33}, {430, 758}, {172, 286}, {66, 343}, {256, 768}, {539, 17}, {610, 134}, {547, 487}, {683, 260}, {950, 511}, {868, 581}, {695, 531}, {279, 193}, {276, 324}, {327, 669}, {467, 800}, {284, 466}, {275, 480}, {946, 443}, {224, 917}, {526, 508}, {817, 870}, {566, 852}, {447, 270}, {410, 838}, {555, 832}, {400, 146}, {106, 626}, {778, 806}, {540, 314}, {333, 524}, {710, 590}, {650, 802}, {386, 14}, {260, 446}, {638, 537}, {329, 809}, {790, 311}, {208, 773}, {949, 228}, {669, 785}, {160, 282}, {798, 638}, {937, 552}, {869, 708}, {820, 60}, {287, 347}, {313, 649}, {834, 679}, {4, 163}, {597, 1}, {805, 954}, {199, 691}, {770, 130}, {865, 910}, {623, 713}, {448, 89}, {231, 571}, {328, 685}, {117, 429}, {185, 727}, {179, 144}, {404, 928}, {570, 696}, {296, 701}, {943, 689}, {738, 846}, {815, 578}, {554, 883}, {349, 913}, {511, 105}, {615, 505}, {667, 652}, {852, 908}, {624, 475}, {535, 643}, {881, 854}, {696, 356}, {809, 51}, {35, 139}, {553, 861}, {277, 379}, {362, 792}, {708, 217}, {476, 598}, {175, 872}, {115, 915}, {908, 151}, {705, 502}, {229, 247}, {280, 644}, {364, 871}, {7, 212}, {572, 504}, {184, 659}, {360, 242}, {721, 882}, {520, 175}, {845, 236}, {384, 895}, {684, 277}, {551, 719}, {895, 431}, {757, 86}, {396, 517}, {486, 825}, {825, 18}, {337, 216}, {927, 348}, {672, 409}, {352, 900}, {689, 857}, {779, 438}, {876, 173}, {887, 442}, {544, 844}, {941, 605}, {527, 840}, {848, 372}, {628, 433}, {119, 831}, {206, 120}, {8, 568}, {24, 422}, {383, 484}, {96, 36}, {297, 545}, {298, 565}, {205, 191}, {633, 610}, {626, 849}, {23, 118}, {792, 905}, {703, 698}, {131, 640}, {34, 149}, {300, 751}, {763, 782}, {594, 728}, {854, 50}, {234, 167}, {952, 834}, {375, 189}, {796, 416}, {759, 410}, {680, 421}, {145, 587}, {354, 302}, {402, 119}, {737, 52}, {128, 839}, {745, 28}, {506, 599}, {734, 420}, {301, 292}, {534, 477}, {422, 128}, {912, 42}, {10, 44}, {246, 397}, {359, 891}, {699, 389}, {114, 597}, {913, 237}, {508, 776}, {241, 743}, {889, 613}, {787, 13}, {823, 474}, {785, 396}, {237, 5}, {929, 113}, {285, 488}, {254, 284}, {122, 936}, {491, 761}, {191, 837}, {818, 880}, {141, 238}, {195, 210}, {450, 634}, {608, 306}, {822, 127}, {744, 88}, {849, 63}, {437, 385}, {417, 818}, {529, 104}, {568, 106}, {339, 450}, {781, 615}, {773, 58}, {50, 529}, {72, 796}, {718, 912}, {245, 778}, {575, 387}, {368, 244}, {377, 453}, {528, 934}, {227, 856}, {232, 557}, {736, 225}, {309, 274}, {403, 548}, {223, 694}, {614, 472}, {517, 74}, {250, 952}, {632, 798}, {765, 16}, {108, 919}, {940, 674}, {746, 222}, {41, 522}, {856, 68}, {177, 0}, {235, 56}, {319, 481}, {211, 355}, {382, 75}, {147, 506}, {658, 729}, {788, 635}, {800, 808}, {33, 46}, {577, 231}, {380, 757}, {355, 254}, {485, 738}, {723, 9}, {426, 614}, {725, 229}, {418, 921}, {613, 142}, {43, 454}, {631, 467}, {679, 881}, {153, 445}, {269, 804}, {248, 200}, {698, 223}, {648, 432}, {356, 868}, {244, 234}, {921, 760}, {740, 588}, {558, 584}, {263, 688}, {804, 419}, {357, 340}, {266, 399}, {931, 268}, {942, 878}, {861, 332}, {190, 93}, {318, 179}, {838, 942}, {909, 845}, {552, 700}, {353, 288}, {158, 874}, {537, 213}, {38, 585}, {210, 370}, {816, 415}, {22, 296}, {226, 673}, {604, 906}, {668, 289}, {776, 777}, {771, 692}, {954, 721}, {125, 476}, {80, 902}, {40, 55}};
        int n = 957;
        long startTime = System.currentTimeMillis();
        System.out.println(findShortestCycle(n, edges));//3
        long endTime = System.currentTimeMillis();
        System.out.println(endTime - startTime);

    }

    private static void findLoop(int startPoint, int endPoint, int[][] mapMatrix, List<Integer> containPoint, int loopTime) {
        if (endPoint == startPoint) {
            if (loopTime > 3) {
                ansList.add(loopTime - 1);
                return;
            }
        }
        //剪枝
        if (!ansList.isEmpty()) {
            ansList.sort(Comparator.comparingInt(o -> o));
            if (loopTime > ansList.get(0)) {
                return;
            }
        }

        for (int i = 0; i < mapMatrix.length; i++) {
            if (containPoint.contains(i)) {
                continue;
            }
            //防止两点成环
            if (loopTime == 2 && startPoint == i) {
                continue;
            }
            int tempEndPoint = mapMatrix[endPoint][i];
            if (tempEndPoint == 1) {
                containPoint.add(i);
                findLoop(startPoint, i, mapMatrix, containPoint, loopTime + 1);
                containPoint.remove(containPoint.lastIndexOf(i));
            }
        }
    }

    public static int findShortestCycle(int n, int[][] edges) {
        int[][] mapMatrix = new int[n][n];
        for (int[] edge : edges) {
            mapMatrix[edge[0]][edge[1]] = 1;
            mapMatrix[edge[1]][edge[0]] = 1;
        }
        for (int i = 0; i < mapMatrix.length; i++) {
            for (int j = 0; j < mapMatrix.length; j++) {
                if (mapMatrix[i][j] == 1) {
                    List<Integer> containPoint = new ArrayList<>();
                    containPoint.add(j);
                    findLoop(i, j, mapMatrix, containPoint, 2);
                }
            }
        }
        ansList.sort(Comparator.comparingInt(o -> o));
        return ansList.size() == 0 ? -1 : ansList.get(0);
    }

//    public static int findShortestCycleOwn(int n, int[][] edges) {
//        Map<Integer, ArrayList<Integer>> mapMatrix = new HashMap<>();
//        for (int[] edge : edges) {
//            if (mapMatrix.containsKey(edge[0])) {
//                mapMatrix.get(edge[0]).add(edge[1]);
//            } else {
//                ArrayList<Integer> list = new ArrayList<>();
//                list.add(edge[1]);
//                mapMatrix.put(edge[0], list);
//            }
//            if (mapMatrix.containsKey(edge[1])) {
//                mapMatrix.get(edge[1]).add(edge[0]);
//            } else {
//                ArrayList<Integer> list = new ArrayList<>();
//                list.add(edge[0]);
//                mapMatrix.put(edge[1], list);
//            }
//        }
//        for (Map.Entry<Integer, ArrayList<Integer>> entry : mapMatrix.entrySet()) {
//            final Integer key = entry.getKey();
//            final ArrayList<Integer> value = entry.getValue();
//            List<Integer> containPoint = new ArrayList<>();
//            for (Integer integer : value) {
//                containPoint.add(integer);
//                findLoopOwn(mapMatrix, key, integer, containPoint, 2);
//            }
//        }
//
//        ansList.sort(Comparator.comparingInt(o -> o));
//        return ansList.size() == 0 ? -1 : ansList.get(0);
//    }
//
//    private static void findLoopOwn(Map<Integer, ArrayList<Integer>> mapMatrix, int startPoint, int endPoint, List<Integer> containPoint, int loopTime) {
//        if (endPoint == startPoint) {
//            if (loopTime > 3) {
//                ansList.add(loopTime - 1);
//                return;
//            }
//        }
//        //剪枝
//        if (!ansList.isEmpty()) {
//            ansList.sort(Comparator.comparingInt(o -> o));
//            if (loopTime > ansList.get(0)) {
//                return;
//            }
//        }
//        final ArrayList<Integer> arrayList = mapMatrix.get(endPoint);
//        for (Integer i : arrayList) {
//            if (containPoint.contains(i)) {
//                continue;
//            }
//            //防止两点成环
//            if (loopTime == 2 && startPoint == i) {
//                continue;
//            }
//            containPoint.add(i);
//            findLoop(mapMatrix, startPoint, i, containPoint, loopTime + 1);
//            containPoint.remove(containPoint.lastIndexOf(i));
//        }
//    }


    public static int findShortestCycleWay(int n, int[][] edges) {
        Set<Integer>[] graph = new HashSet[n];
        Arrays.setAll(graph, o -> new HashSet<>());
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            graph[u].add(v);
            graph[v].add(u);
        }
        int ans = n + 1;

        for (int i = 0; i < n; i++) {
            Queue<int[]> queue = new LinkedList<>();
            queue.offer(new int[]{i, -1});
            int step = 0;
            int[] dis = new int[n];
            Arrays.fill(dis, -1);
            while (!queue.isEmpty()) {
                ++step;
                int size = queue.size();
                boolean find = false;
                for (int j = 0; j < size; j++) {
                    int[] top = queue.poll();
                    for (int next : graph[top[0]]) {
                        if (next == top[1]) continue;
                        if (dis[next] == -1) {
                            dis[next] = step;
                            queue.offer(new int[]{next, top[0]});
                        } else {
                            ans = Math.min(dis[next] + dis[top[0]] + 1, ans);
                            find = true;
                        }
                    }
                }

                //假设存在两个点在同层找到已访问节点，比如一个找到当前层一个找到上一层的情况，可能有bug
                // 如果同层同时存在 同+同、同+上则有bug
                if (find) break;
            }
        }
        return ans == n + 1 ? -1 : ans;
    }
}
