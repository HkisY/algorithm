exam4:
    There are N nodes. Each node has two links, so there are 2N links. Each node but the root has one incoming link from
its parent, which accounts for N-1 links. The rest are null.So 2N-(N-1) = N+1

exam5:
    Proof is by induction.The theorem is trivially true for h = 0. Assume true for h = 1,2,...,k. A tree of height k + 1
can have two subtrees of height at most k. These can have at most 2^(k+1)-1 nodes each by the induction hypothesis.
These 2^(k+2)-2 nodes plus the root prove the theorem for height k + 1 and hence for all heights.

*exam6:
    This can be shown by induction. Alternatively, let N = number of nodes, F = number of full nodes,L = number of leaves,
and H = number of half nodes (nodes with one child). Clearly, N = F + H + L. Further, 2F + H = N - 1 (see Exam4).
Subtracting yields L - F = 1.

exam7:
    This can be shown by induction. In a tree with no nodes, the sum is zero, and in a one-node tree, the root is a
leaf at depth zero, so the claim is true. Suppose the theorem is true for all trees with at most k nodes. Consider any
tree with k + 1 nodes. Such a tree consists of an i node left subtree and a k - i node right subtree. By the inductive
hypothesis, the sum for the left subtree leaves is at most one with respect to the left tree root. Because all leaves
are one deeper with respect to the original tree than with respect to the subtree, the sum is at most 1/2 with respect
to the root. Similar logic implies that the sum for leaves in the right subtree is at most 1/2, proving the theorem.
The equality is true if and only if there are no nodes with one child. If there is a node with one child, the equality
cannot be true because adding the second child would increase the sum to higher than 1. If no nodes have one child,
then we can find and remove two sibling leaves, creating a new tree. It is easy to see that this new tree has the same
sum as the old. Applying this step repeatedly, we arrive at a single node, whose sum is 1. Thus, the original tree had summed 1.

exam14:
    (a)Keep a bit array B. If 'i' is in the tree, then B[i] is true; otherwise, it is false. Repeatedly generate random
integers until an unused one is found. If there are N elements already in the tree, then M - N are not, and the
probability of finding one of these is (M - N)/M. Thus, the expected number of trials is M/(M - N) = α/(α - 1).
    (b)To find an element that is in the tree, repeatedly generate random integers until an already-used integer is found.
The probability of finding one is N/M, so the expected number of trials is M/N = α.
    (c)The total cost for one insert and one delete is α/(α - 1) + α = 1 + α + 1/(α - 1). Setting α = 2
minimizes this cost.

exam15:
    skip it!!!!

exam20:
    It is easy to verify by hand that the claim is true for 1 <= k <= 3. Suppose it is true for k = 1, 2, 3, . . . h. Then
after the first 2^h-1 insertions, 2^(h-1) is at the root, and the right subtree is a balanced tree containing 2^(h-1) + 1
through 2^h-1. Each of the next 2^(h-1) insertions, namely, 2^h through 2^h + 2^(h-1)-1, insert a new maximum and get placed
in the right subtree, eventually forming a perfectly balanced right subtree of height h - 1. This follows by the
induction hypothesis because the right subtree may be viewed as being formed from the successive insertion of 2^(h - 1) + 1
through 2^h + 2^(h - 1)-1. The next insertion forces an imbalance at the root, and thus a single rotation. It is easy to
check that this brings 2^h to the root and creates a perfectly balanced left subtree of height h-1. The new key is
attached to a perfectly balanced right subtree of height h - 2 as the last node in the right path. Thus the right
subtree is exactly as if the nodes 2^h + 1 through 2^h + 2^(h - 1) were inserted in order. By the inductive hypothesis,
the subsequent successive insertion of 2^h + 2^(h-1) + 1 through 2^(h + 1)-1 will create a perfectly balanced right subtree
of height h - 1. Thus after the last insertion, both the left and the right subtrees are perfectly balanced, and of
the same height, so the entire tree of 2^(h + 1)-1 nodes is perfectly balanced (and has height h).

exam21:
    The two remaining functions are mirror images of the text procedures. Just switch right and left everywhere.

exam24:
    The code in Figure 4.44 implements the AVL deletion algorithm. x is the value to remove, and t is the (sub)tree in
question. We recursively traverse down the tree until t matches x, which means we found the appropriate node to
delete. The actual deletion occurs in the last two else clauses. There are several cases to consider here. The first
case is where t has two children. In this case, as in a binary search tree, we move t's successor node into t's position,
and then proceed to remove t's sucessor. The last else clause handles the case where t is a leaf or t has one child.
If t is a leaf, then the test t.left != null will be false, and so t is assigned t.right, which is also null.
If t has one child, then t is assigned to it. Again, this is how deletion is done in binary search trees. Finally,
it is necessary to balance the tree, because a deletion may have temporarily violated the balance (height) requirement
of AVL trees.
    The code to balance an AVL tree is given in Figure 4.39. It determines whether a single or double rotation is necessary.
This balancing code is used for both insertions and deletions. On lines 32 and 38, if the >= is replaced with >, it will
have this effect: if the heights of the left.left and left.right children are equal, or the heights of the right.left
and right.right children are equal, then we will perform a double instead of single rotation.
    If we were only dealing with insertions, then it would not make much difference if we used >= or >. Without loss of
generality, let us consider the case where an imbalance occurs because height(t.right) - height(t.left) >1. This imbalance
has occurred because we just inserted a new node into the subtree t.right. It cannot be the case that height(t.right.right)
equals height(t.right.left). Otherwise, there would be no imbalance at t, or the imbalance was caused on a previous
insertion and it was not fixed. This phenomenon was observed in the example in the text after inserting 1-8 in order
followed by 16, 15, and 14. The insertions of 15 and 14 cause imbalances necessitating a double rotation.
    However, in the case of a deletion, it is possible for height(t.right.right) to equal height(t.right.left).
Consider the tree
    49

40	    60

    50      70

    The deletion of 40 will cause an imbalance at the 49 node. In this case, a single rotation is appropriate, so we would
want a >=, not a >, at line 38 to correctly fix the tree. The case for line 32 with the heights of t.left.left and
t.left.right is analogous.

exam27:
After accessing 3,
    preorder traversal of the root is :
    3 2 1 10 4 6 5 8 7 9 11 12 13
    inorder traversal of the root is:
    1 2 3 4 5 6 7 8 9 10 11 12 13 (BinarySearch Tree)
After accessing 9,
    9 3 2 1 4 8 6 5 7 10 11 12 13
After accessing 1,
    1 9 2 3 4 8 6 5 7 10 11 12 13
After accessing 5,
    5 1 2 4 3 9 6 8 7 10 11 12 13

exam28:
After removing 6,
    preorder traversal of the root is :
    5 1 2 4 3 9 8 7 10 11 12 13

exam29:
    (a)an easy proof by induction
    (b)i can`t do that

exam30:
    use a random function

exam42:
    emmmmmm

exam43:
    emmmmmm

exam44:
    too easy to write --!

exam45:
    see exam41

exam48:
    The easiest solution is to compute, in linear time, the inorder numbers of the nodes in both trees. If the inorder
number of the root of T2 is x, then find x in T1 and rotate it to the root. Recursively apply this strategy to the left
and right subtrees of T1 (by looking at the values in the root of T2’s left and right subtrees). If dN is the depth of x,
then the running time satisfies T(N) = T(i) + T(N - i - 1) + dN, where i is the size of the left subtree. In the worst case,
dN is always O(N), and i is always 0, so the worst-case running time is quadratic. Under the plausible assumption that
all values of i are equally likely, then even if dN is always O(N), the average value of T(N) is O(N log N).
This is a common recurrence that was already formulated in the chapter and is solved in Chapter 7. Under the more
reasonable assumption that dN is typically logarithmic, then the running time is O(N).

exam49:
    Add a data member to each node indicating the size of the tree it roots. This allows computation of its inorder
traversal number.

exam50:
    (a)Need an extra bit for each thread.
    (c)Can do tree traversals somewhat easier and without recursion. The disadvantage is that it reeks of old-style hacking.

exam51:
    (a) Both values are 0.
    (b) The root contributes (N - 2)/N full nodes on average, because the root is full as long as it does not contain
the largest or smallest item. The remainder of the equation is the expected contribution of the subtrees.
    (d) The average number of leaves is (N + 1)/3.

